{"version":3,"sources":["BotControl.js","Project.js","ProjectViewer.js","BotJob.js","requests.js","Bot.js","index.js"],"names":["BotControl","props","className","status","total","success","failed","projectCount","onClick","onRefresh","Project","useState","hide","setHide","project","elapsed_time","Date","setSeconds","time_submitted","timeago","budget","minimum","maximum","title","prev","window","open","seo_url","description","currency","country","ProjectViewer","projects","map","id","BotJobSearchResult","name","onJobAdd","BotJob","ref","callback","jobSearchResult","setJobSearchResult","wrapperRef","useRef","setMatchingJobs","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","search","length","regex","RegExp","replace","newJobs","allJobs","job","push","jobs","type","value","e","onJobSelect","defaultChecked","htmlFor","onChange","onFocus","https","require","justLog","args","arg","console","log","getResponse","options","successCallback","errorCallback","req","request","res","data","on","d","end","exported","multiRequest","datas","index","func","multiRequest2","afterAll","defaultJobs","Bot","slice","setJobs","setAllJobs","setJob","setProjects","requestStatus","setRequestStatus","hostname","port","path","method","result","JSON","parse","newAllJobs","refreshJob","code","option","oldProjects","newProjects","newProject","found","error","filteredProjects","jobId","filter","sort","lhs","rhs","Number","filterProjects","oldJobs","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d26ba25b.chunk.js","sourcesContent":["import './BotControl.css'\n\nfunction BotControl(props) {\n    return (\n        <div>\n            <div className={'bot-status'}>\n                <div className={'bot-status-col0'}>\n                    <div>Total Request:</div>\n                    <div>Success Request:</div>\n                    <div>Failed Request:</div>\n                    <div>Project Count:</div>\n                </div>\n                <div className={'bot-status-col1'}>\n                    <div>{props.status.total}</div>\n                    <div className={'success-color'}>{props.status.success}</div>\n                    <div className={'error-color'}>{props.status.failed}</div>\n                    <div>{props.status.projectCount}</div>\n                </div>\n            </div>\n            <div className={'bot-controls'}>\n                <button onClick={props.onRefresh}>Refresh</button>\n            </div>\n        </div>\n    );\n}\n\nexport default BotControl;","import React from 'react';\nimport {useState} from 'react';\nimport './Project.css'\nimport * as timeago from 'timeago.js';\n\nfunction Project(props) {\n\n    const [hide, setHide] = useState(true);\n\n    const project = props.project;\n    const viewAction = () => setHide(prev => !prev);\n    const openAction = () => window.open(`https://www.freelancer.com/projects/${props.project.seo_url}`, '_blank');\n\n    // find elapsed time since the project was added\n    let elapsed_time = new Date(1970, 0, 1);\n    elapsed_time.setSeconds(project.time_submitted);\n    elapsed_time = timeago.format(elapsed_time);\n\n    // budget string. min budget  - max budget\n    const budget = `${project.budget.minimum} - ${project.budget.maximum}`\n\n    return (\n        <div className='project'>\n            <div className='project-header'>\n                <div className='project-title'>{project.title}</div>\n                <div className='project-actions'>\n                    <button className='project-action' onClick={viewAction}>view</button>\n                    <button className='project-action' onClick={openAction}>open</button>\n                </div>\n            </div>\n\n            {hide ? null :\n                <div className='project-body'>\n                    {project.description}\n                </div>\n            }\n\n            <div className={'project-footer'}>\n                <div className={'project-footer-item color-lightgreen'}> {budget} {project.currency.country}</div>\n                <div className={'project-footer-item color-red'}>{elapsed_time}</div>\n            </div>\n        </div>\n    );\n}\n\nexport default Project;","import Project from './Project';\nimport './ProjectViewer.css'\n\nfunction ProjectViewer(props) {\n    const projects = props.projects.map(project => {\n            return (\n                <div key={project.id}>\n                    <Project project={project}/>\n                </div>\n            );\n    });\n\n    return (\n        <div className='project-viewer'>\n            {projects}\n        </div>\n    );\n}\n\nexport default ProjectViewer;","import {useState, useEffect, useRef} from 'react';\nimport './BotJob.css'\n\n/**\n *\n * https://stackoverflow.com/questions/32553158/detect-click-outside-react-component\n * Hook that alerts clicks outside of the passed ref\n */\nfunction useDetectClickOutside(ref, callback) {\n    useEffect(() => {\n        /**\n         * Alert if clicked on outside of element\n         */\n        function handleClickOutside(event) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                callback();\n            }\n        }\n\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [ref, callback]);\n}\n\n\n/**\n * https://stackoverflow.com/a/3561711/16803407\n * Escapes any characters that would have special meaning in a regular expression.\n * @param string\n * @returns string\n */\nfunction escapeRegex(string) {\n    return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\n/**\n *\n * @param {{id: number, name: string, onAdd: function}} props\n */\nfunction BotJobSearchResult(props) {\n    return (\n        <div className={'bot-job-search-result'}>\n            <p>{props.name}</p>\n            <button onClick={() => props.onJobAdd(props.id, props.name)}>Add</button>\n        </div>\n    );\n}\n\n\nfunction BotJob(props){\n    const [jobSearchResult, setJobSearchResult] = useState([]);\n    const wrapperRef = useRef(null);\n    useDetectClickOutside(wrapperRef, () => setMatchingJobs(false));\n\n    const setMatchingJobs = (search) => {\n        if (search === false) {\n            if (jobSearchResult.length > 0)\n                setJobSearchResult([]);\n        }\n        else if (search !== '') {\n            const regex = new RegExp(\"(^|\\\\s+)\" + escapeRegex(search) + \"(\\\\S)*\", 'i');\n            const newJobs = [];\n            for (const job of props.allJobs) {\n                if (job.id !== 0 && job.name.search(regex) !== -1) {\n                    newJobs.push(<BotJobSearchResult key={job.id} id={job.id} name={job.name} onJobAdd={props.onJobAdd}/>);\n                }\n            }\n            setJobSearchResult(newJobs);\n        }\n    };\n\n    const jobs = props.jobs.map(job => {\n        return (\n            <div key={job.id}>\n                <input type=\"radio\" id={'job' + job.id} name='job' value={job.id}\n                       onClick={e => props.onJobSelect(e.target.value)}\n                       defaultChecked={props.job === job.id}/>\n                <label htmlFor={'job' + job.id}>{job.name}</label>\n            </div>\n        );\n    });\n\n    return (\n        <div className={'bot-jobs'}>\n            <div ref={wrapperRef}  className={'bot-jobs-search'}>\n                <input type=\"text\" onChange={e => setMatchingJobs(e.target.value)}\n                       onFocus={(e) => setMatchingJobs(e.target.value)} />\n                <div className={'bot-jobs-search-results'}>\n                    {jobSearchResult}\n                </div>\n            </div>\n            <div className={'bot-jobs-view'}>\n                {jobs}\n            </div>\n        </div>\n    );\n}\n\nexport default BotJob;","const https = require('https');\n\nfunction justLog(...args) {\n    for (const arg of args) {\n        console.log('Requests:', arg);\n    }\n}\n\nfunction getResponse(options, successCallback = justLog, errorCallback = justLog) {\n    const req = https.request(options, res => {\n        let data = '';\n        res.on('data', d => data += d);\n        res.on('end', () => successCallback(data));\n    });\n    req.on('error', errorCallback);\n    req.end();\n}\n\nfunction multiRequest(options, successCallback, errorCallback) {\n    let datas = [];\n    let index = 0;\n    let func = data => {\n        datas.push(data);\n        index += 1;\n        if (index < options.length) {\n            getResponse(options[index], func, errorCallback);\n        } else {\n            successCallback(datas);\n        }\n    };\n    getResponse(options[index], func, errorCallback);\n}\n\n\nfunction multiRequest2(options, successCallback, afterAll = justLog, errorCallback = justLog) {\n    let index = 0;\n    let func = data => {\n        successCallback(data);\n        index += 1;\n        if (index < options.length) {\n            getResponse(options[index], func, errorCallback);\n        } else {\n            afterAll();\n        }\n    };\n    getResponse(options[index], func, errorCallback);\n}\n\nconst exported = {multiRequest, getResponse, multiRequest2}\nexport default exported;","import React, {useEffect, useState} from 'react';\nimport BotControl  from './BotControl';\nimport ProjectViewer from './ProjectViewer';\nimport BotJob from './BotJob';\nimport './Bot.css'\nimport request from './requests';\n\nconst defaultJobs = [\n    {id: 0, name: 'All'},\n    {id: 6, name: 'C'},\n    {id: 448, name: 'Assembly'},\n    {id: 320, name: 'C++'},\n    {id: 31, name: 'Linux'},\n    {id: 336, name: 'UNIX'},\n    {id: 508, name: 'x86'},\n];\n\n// Return projects whose has a job === jobId\nfunction filterProjects(projects, jobId) {\n    return projects.filter(project => {\n        if (jobId === 0)\n            return true;\n        for (const job of project.jobs) {\n            if (job.id === jobId)\n                return true;\n        }\n        return false;\n    }).sort((lhs, rhs) => {\n        return Number(rhs.time_submitted > lhs.time_submitted);\n    });\n}\n\nfunction Bot(props) {\n\n    const [jobs, setJobs] = useState(defaultJobs.slice());\n    const [allJobs, setAllJobs] = useState(defaultJobs.slice());\n    const [job, setJob] = useState(0);\n    const [projects, setProjects] = useState([]);\n    const [requestStatus, setRequestStatus] = useState({total: 0, success: 0, failed: 0});\n\n    // Get All jobs. Populate allJobs hook\n    useEffect(() => {\n        const option = {\n            hostname: 'www.freelancer.com',\n            port: 443,\n            path: '/api/projects/0.1/jobs/?active_project_count_details=true&webapp=1&compact=true&new_errors=true&new_pools=true',\n            method: 'GET',\n        }\n        request.getResponse(option, data => {\n            const result = JSON.parse(data).result;\n            const newAllJobs = [];\n            for (const job of result) {\n                newAllJobs.push({id: job.id, name: job.name});\n            }\n            setAllJobs(newAllJobs);\n        });\n    }, []);\n\n    // Fetch new projects and add them to projects hook\n    const refreshJob = (code) => {\n        const option = {\n            hostname: 'www.freelancer.com',\n            port: 443,\n            path: `/api/projects/0.1/projects/active?limit=20&full_description=true&job_details=true&location_details=true&upgrade_details=true&user_country_details=true&user_details=true&user_employer_reputation=true&jobs[]=${code}&languages[]=en&sort_field=submitdate&webapp=1&compact=true&new_errors=true&new_pools=true`,\n            method: 'GET',\n        }\n        setRequestStatus(prev => {return {...prev, total: prev.total+1}});\n        request.getResponse(option, data => {\n            const result = JSON.parse(data).result;\n            if (result && result.projects) {\n                setRequestStatus(prev => {return {...prev, success: prev.success+1}});\n            } else {\n                setRequestStatus(prev => {return {...prev, failed: prev.failed+1}});\n            }\n            if (result && result.projects) {\n                setProjects(oldProjects => {\n                    const newProjects = oldProjects.slice();\n                    for (const newProject of result.projects) {\n                        let found = false;\n                        for (const project of newProjects) {\n                            if (project.id === newProject.id) {\n                                found = true;\n                                break;\n                            }\n                        }\n                        if (!found) {\n                            newProjects.push(newProject);\n                        }\n                    }\n                    return newProjects;\n                });\n            }\n        }, error => setRequestStatus(prev => {return {...prev, failed: prev.failed+1}}));\n    };\n\n    const onJobAdd = (id, name) => {\n        setJobs(oldJobs => {\n            for (const job of oldJobs) {\n                if (job.id === id)\n                    return oldJobs;\n            }\n            const newJobs = oldJobs.slice();\n            newJobs.push({id: id, name: name});\n            return newJobs;\n        });\n    }\n\n    const onRefresh = () => {\n        const jobCodes = jobs.map(job => job.id).filter(id => job === 0 || id === job);\n        jobCodes.map(refreshJob);\n    }\n\n    const onJobSelect = (id) => {\n        setJob(Number(id));\n    }\n\n    const filteredProjects = filterProjects(projects, job);\n\n    return (\n      <div className='bot'>\n          <div className='bot-left-panel'>\n              <div className={'bot-left-control-panel'}>\n                <BotControl status={{...requestStatus, projectCount: filteredProjects.length}} onRefresh={onRefresh}/>\n              </div>\n              <div className={'bot-left-jobs-panel'}>\n                  <BotJob allJobs={allJobs} jobs={jobs} job={job} onJobAdd={onJobAdd} onJobSelect={onJobSelect}/>\n              </div>\n          </div>\n          <div className='bot-right-panel'>\n              <ProjectViewer projects={filteredProjects}/>\n          </div>\n      </div>\n    );\n}\n\nexport default Bot;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Bot from './Bot';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n      <div>\n          <Bot/>\n      </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}